This app is used to take individual user activity analytics and aggregate it into a course-level view that is filterable and sortable. It is unique in that it is triggered from Canvas but is not an LTI app. It is added as a button via the custom javascript that can be added to Canvas globally. This is because it pulls data from a URL which is not an official API endpoint, and therefore must be done on the client side while a user is logged in via the browser. It cannot be done via the normal programmatic way because the non-API endpoint does not accept normal API authentication methods.

After the data has been collected on the client side, it is sent along via javascript by making a request to the app running on the wolf server (POST '/upload'). The data is sent as a CSV string. It is parsed into a hash format to make front-end formatting easier, and is stored in Redis as both the original CSV string (Redis key: "course:#{courseID}:csv_data") and the processed hash (Redis key: "course:#{courseID}:access_data"). After the data upload is complete, the javascript running on Canvas redirects the user to the wolf app (GET '/course/:course_id') to view the formatted data. From this page, the data can also be downloaded as a CSV.

Every time the access report button on Canvas is pressed, an asynchronous request will be made to GET '/check-data/course:id' to check if the requested data is already cached in Redis. If it is, the upload process will be skipped and the user immediately redirected to view the data. The Redis data does not expire, and needs to be manually cleared & reloaded with a button on the view page.

The javascript that needs to run on Canvas to achieve all this can be served up by the app itself (GET '/access-report.js'). This allows the endpoints of the wolf app to be dynamically interpolated into the javascript, and also minimizes the amount of javascript that needs to be added to the global custom Canvas javascript. There is an example of the code needed to load this script into Canvas that can be accessed at GET "/canvas-example.js".

Access to the data view page, the download route, and the reload route require user authentication through Canvas (see sinatra-canvas_auth gem) and are only available to Admins and Teachers.
